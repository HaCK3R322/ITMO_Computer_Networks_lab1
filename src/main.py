from machester_code import manchester_code
from tabulate import tabulate
from rz_code import rz_code
from nrz_code import nrz_code
from nrzi_code import nrzi_code
from ami_code import ami_code
from _4b5b_code import logic_code
from scramble_code import scramble


def main():
    ########################################
    #                ЭТАП 1                #
    ########################################
    print("========== ЭТАП 1 ==========")

    source_message = 'Андросов И.С.'
    print('Исходное сообщение: ' + source_message)

    hex_message = [0xC0, 0xED, 0xE4, 0xF0, 0xEE, 0xF1, 0xEE, 0xF2, 0x20, 0xC8, 0x2E, 0xD1, 0x2E]
    print('Шестандцатеричное представление: ', end='')
    for byte in hex_message:
        print(format(byte, '02X'), end=' ')
    print()

    print('Двоичное представление: ', end='')
    binary_message = []
    for byte in hex_message:
        binary_byte = bin(byte)[2:].zfill(8)
        binary_message.extend(int(x) for x in list(binary_byte))

    binary_message_print_count = 1
    for number in binary_message:
        print(number, end='')
        binary_message_print_count += 1
        if binary_message_print_count == 9:
            print(' ', end='')
            binary_message_print_count = 1
    print()

    ########################################
    #                ЭТАП 2                #
    ########################################
    print("\n========== ЭТАП 2 ==========")
    print("ПРОПУСКНАЯ_СПОСОБНОСТЬ = 100 Мб/с")

    binary_message_first_4_bytes = binary_message[:32]

    print("\n=== Манчестерский код: =====")
    manchester_code(binary_message_first_4_bytes)
    # Частотный спектр сигнала при манчестерском кодировании включает в себя только две частоты:
    # при скорости передачи 100 Мбит/с
    # это 100 МГц (соответствует передаваемой цепочке из одних нулей или из одних единиц)
    # и 50 МГц (соответствует последовательности из чередующихся нулей и единиц: 1010101010...
    print('Верхняя граница: 100 МГц (fв)')
    print('Нижняя граница: 50 МГц (fн)')
    print('Спектр частот: 50 МГц (S = fв-fн)')
    print('Средняя частота: ' + '82.8125 МГц')

    print("\n=== RZ код: ================")
    rz_code(binary_message_first_4_bytes)
    print('Верхняя граница: 100 МГц (fв)')
    print('Нижняя граница: 50 МГц (fн)')
    print('Спектр частот: 50 МГц (S = fв-fн)')
    print('Средняя частота: ' + '76.5625 МГц')

    print("\n=== NRZ (униполярный) код: =")
    nrz_code(binary_message_first_4_bytes)
    print('Верхняя граница: 50 МГц (fв [C/2])')
    print('Нижняя граница: 8.333 МГц (fн [C/12])')
    print('Спектр частот: 41.666 МГц (S = fв-fн)')
    print('Средняя частота: ' + '9.7656 МГц')

    print("\n=== NRZI код: =====")
    nrzi_code(binary_message_first_4_bytes)
    print('Верхняя граница: 50 МГц (fв [C/2])')
    print('Нижняя граница: 7.142 МГц (fн [C/14])')
    print('Спектр частот: 42.857 МГц (S = fв-fн)')
    print('Средняя частота: 18.764')

    print("\n=== AMI код: =====")
    ami_code(binary_message_first_4_bytes)
    print('Верхняя граница: 50 МГц (fв [C/2])')
    print('Нижняя граница: 6.25 МГц (fн [C/16])')
    print('Спектр частот: 43.75в МГц (S = fв-fн)')
    print('Средняя частота: 21.25')

    print("\n")

    # Создаем список данных с кодировками, плюсами и минусами
    data = [
        ["Манчестерский код",
         "Имеет всего два уровня сигнала, Отсутствует постоянная составляющая, Есть самосинхронизация",
         "Широкий спектр сигнала"],
        ["RZ код",
         "Имеет всего два уровня сигнала, Используется меньший спектр",
         "Нет самосинхронизации"],
        ["NRZ (униполярный) код",
         "Имеет всего два уровня сигнала, Отсутствует постоянная составляющая",
         "Нет самосинхронизации"],
        ["NRZI код",
         "Имеет всего два уровня сигнала, Есть самосинхронизация, Можно выявлять ошибки",
         "Постоянная составляющая при длинных комбинациях"],
        ["AMI код",
         "Есть самосинхронизация, Постоянная составляющая отсутствует при коротких комбинациях",
         "Три уровня сигнала, Постоянная составляющая при длинных комбинациях"]
    ]
    # Определяем заголовки
    headers = ["Кодировка", "Плюсы", "Минусы"]
    # Используем tabulate для создания таблицы
    table = tabulate(data, headers, tablefmt="fancy_grid")
    # Выводим таблицу
    print(table)
    print("Лучшие: Манчестерский код, NRZI код")

    ########################################
    #                ЭТАП 3                #
    ########################################
    print("\n========== ЭТАП 3 ==========")

    logic_coded_message = logic_code(binary_message)
    print('Двоичное представление логического кодирования сообщения (первые 4 байта): ', end="")
    binary_message_print_count = 1
    for number in logic_coded_message[:32]:
        print(number, end='')
        binary_message_print_count += 1
        if binary_message_print_count == 9:
            print(' ', end='')
            binary_message_print_count = 1
    print()

    print('В шестнадцатеричном коде: C7A9AD3A')

    print('Длина сообщения:', len(logic_coded_message), 'бит (' + str(len(logic_coded_message) / 8) + ' байт)')
    print('Избыточность: 3.25/13 = 25%')

    nrz_code(logic_coded_message[:32], 'логически закодированное')
    print('Верхняя граница: 50 МГц (fв [C/2]) | против | 50 МГц')
    print('Нижняя граница: 10 МГц (fн [C/10]) | против | 8.333 МГц')
    print('Спектр частот: 40 МГц (S = fв-fн)  | против | 41.666 МГц')
    print('Средняя частота: 18.93 МГц         | против | 9.7656 МГц')

    ########################################
    #                ЭТАП 4                #
    ########################################
    print("\n========== ЭТАП 4 ==========")

    print('Скрэмблированное сообщение (первые 4 байта): ', scramble(binary_message)[:32])
    nrz_code(scramble(binary_message)[:32], 'скрэмблированное')
    print('Верхняя граница: 50 МГц (fв [C/2])     | против | 50 МГц')
    print('Нижняя граница: 7.1428 МГц (fн [C/10]) | против | 8.333 МГц')
    print('Спектр частот: 42.85 МГц (S = fв-fн)   | против | 41.666 МГц')
    print('Средняя частота: 21.577 МГц            | против | 9.7656 МГц')

    ########################################
    #                ЭТАП 5                #
    ########################################
    print("\n========== ЭТАП 5 ==========")

    # Создаем список данных с кодировками, плюсами и минусами
    data = [
        ["Манчестерский код",
         "Имеет всего два уровня сигнала, Отсутствует постоянная составляющая, Есть самосинхронизация",
         "Широкий спектр сигнала"],
        ["NRZI код",
         "Имеет всего два уровня сигнала, Есть самосинхронизация, Можно выявлять ошибки",
         "Постоянная составляющая при длинных комбинациях"],
        ["Избыточное кодирование",
         "Есть самосинхронизация, Используется меньший спектр, Можно выявлять ошибки, Простая реализация в виде "
         "таблицы перекодировки",
         "Уменьшение пропускной способности из-за лишних бит, Дополнительные ресурсные затраты при логическом "
         "кодировании"],
        ["Скремблирование",
         "Нет уменьшения пропускной способности, Отсутствует постоянная составляющая",
         "Дополнительные ресурсные затраты при скремблировании и дескремблировании,"
         "Отсутствие гарантии исключения всех последовательностей и возможность появления новых. "]
    ]
    # Определяем заголовки
    headers = ["Кодировка", "Плюсы", "Минусы"]
    # Используем tabulate для создания таблицы
    table = tabulate(data, headers, tablefmt="fancy_grid")
    # Выводим таблицу
    print(table)
    print("Наиболее эффективным алгоритмом кодирования для составленного сообщения является избыточное кодирование. "
          "Ресурсные затраты для табличного кодирования несущественные, по сравнению с операцией скремблирования. "
          "Возможность выявлять ошибки нивелирует падение пропускной способности на 25%. ")


if __name__ == '__main__':
    main()
